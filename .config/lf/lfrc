# Draw boxes around panes with box drawing characters 
set drawbox true

# Show hidden files
set hidden true

# Hidden file glob patterns
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"

# Show icons before each item 
set icons

# Sets internal field separator (IFS) for shell commands
set ifs "\n"

# Number of seconds to periodically check for directory updates 
set period 1

# Show previews of files and directories
set preview true

# Sets the previewer
set previewer "${XDG_CONFIG_HOME:-$HOME/.config}/lf/previewer"

# Leave some space at the top and the bottom of the screen
set scrolloff 10

# Interpreter for shell commands (needs to be POSIX compatible)
set shell bash

# Set '-eu' options for shell commands to have safer shell commands
# Option '-e' is used to exit on error
# Option '-u' is used to give error for unset variables
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at times
set shellopts '-eu'


# Vars that depend on environmental variables
$lf -remote "send $id set previewer ${XDG_CONFIG_HOME:-$HOME/.config}/lf/scope"


# Open files command
cmd open ${{
  case $(file --mime-type "$f" -bL) in
    text/*|application/json) $EDITOR "$f";;
    video/*|image/*/application/pdf) xdg-open "$f";;
    *) xdg-open "$f" ;;
  esac
}}
    esac
}}

# Make directory command
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

# Make file command
cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

# Make file command running sudo
cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

# Change file mode command
cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

# Delete file command
cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf $fx
}}

# Move file command
cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf | sed 's|~|$HOME|' )" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

# Copy file command
cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf | sed 's|~|$HOME|' )" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

# Run delete command
map D delete

# Run copy command
map C copyto

# Run move command
map M moveto

# Create new folder command
map <c-n> push :mkdir<space>

# Reload
map <c-r> reload

# Use enter for shell commands
map <enter> shell

# Execute current file (must be executable)
map x $$f
map X !$f

# Dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f
